# this file is included by the Makefiles of the subdirectory. These Makefiles must set $(deps) before including this

# make sure first target depends on "all" which is defined in each of the subdirs
a: all

# create .bin subdirectory, if it does not exist:
DUMMY_MKBINDIR := $(shell [ -d .bin ] || mkdir .bin)

# include dependencies, make on demand. $(deps) is set by the sub-Makefiles. However, do not
# build deps for "make clean"...
ifeq (0, $(words $(findstring $(MAKECMDGOALS), clean clean-subdir)))
  -include $(deps)
endif

# if available, use dependencies from CMSSW:
ifneq ($(shell which scram || echo -n A),A)
   scram = $(shell cd $$CMSSW_BASE; scram tool tag $(1) $(2))
   BOOST_INCLUDE := -I$(call scram,boost,INCLUDE)
   BOOST_LIBLIST := $(call scram,boost,LIB) $(call scram,boost_filesystem,LIB) $(call scram,boost_program_options,LIB) $(call scram,boost_regex,LIB)
   BOOST_LIBS := -L$(call scram,boost,LIBDIR) $(patsubst %,-l%,$(BOOST_LIBLIST))
   SQLITE_LIBLIST := $(call scram,sqlite,LIB)
   SQLITE_LIBS := $(patsubst %,-l%,$(SQLITE_LIBLIST)) -L$(call scram,sqlite,LIBDIR)
   SQLITE_INCLUDE := -I$(call scram,sqlite,INCLUDE)
# otherwise: assume dependencies are installed system-wide and no paths have to be set explicitely:
else
   BOOST_INCLUDE:=
   SQLITE_INCLUDE:=
   SQLITE_LIBS := -lsqlite3
   #on some systems, boost libraries have a "-mt" suffix. This is a dirty hack. If you know better, tell me:
   BS:=
   ifeq ($(shell test -e /usr/lib/libboost_system-mt.so && echo -n A),A)
      BS:=-mt
   endif
   BOOST_LIBS := -lboost_filesystem$(BS) -lboost_regex$(BS) -lboost_program_options$(BS) -lboost_thread$(BS)
endif


DEFINES :=

ifeq ($(OPTIONS_USE_CRLIBM),yes)
   DEFINES += -DUSE_CRLIBM
endif

#lazy evaluation to allow subdirectories to add their own includes and libs ...
INCLUDES = -I.. $(BOOST_INCLUDE) $(SQLITE_INCLUDE)
EXTRA_COMPILE =
EXTRA_LINK_EXE =
EXTRA_LINK_SO =

COMPILE = echo creating $@; $(CXX) $(DEFINES) -g -c -Wall -fPIC -O3 $(INCLUDES) $(EXTRA_COMPILE)
LINK_EXE = echo linking $@; $(CXX) -Wl,-R,'$$ORIGIN/../lib' -rdynamic -L../lib -ldl -ltheta -lconfig $(SQLITE_LIBS) $(BOOST_LIBS) $(EXTRA_LINK_EXE)
LINK_EXE_STATIC = echo linking $@; $(CXX) -static -Wl,-R,'$$ORIGIN/../lib' -rdynamic -L../lib -ldl -ltheta -lconfig $(SQLITE_LIBS) $(BOOST_LIBS) $(EXTRA_LINK_EXE)
LINK_SO = echo linking $@; $(CXX) -Wl,-R,'$$ORIGIN/../lib' -shared -rdynamic $(EXTRA_LINK_SO)
CREATE_A = echo creating $@; ar -rs

.bin/%.o: %.cpp
	@$(COMPILE) -o $@ $<

.bin/%.o: %.cxx
	@$(COMPILE) -o $@ $<

.bin/%.o: %.c
	@$(COMPILE) -x c -o $@ $<


.bin/%.d: %.cpp
	@$(COMPILE) -MM -MT '$(patsubst %.cpp,.bin/%.o,$<)' $< > $@

.bin/%.d: %.cxx
	@$(COMPILE) -MM -MT '$(patsubst %.cxx,.bin/%.o,$<)' $< > $@

.bin/%.d: %.c
	@$(COMPILE) -x c -MM -MT '$(patsubst %.c,.bin/%.o,$<)' $< > $@



#make clean rule depend on subdir-specific:
clean: clean-subdir
	@rm -rf .bin

.PHONY: clean clean-subdir

