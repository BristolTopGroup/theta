//define one obervable named "mass" with range [500, 1500] and 200 bins.
observables = {
   mass = {
       range = (500.0, 1500.0);
       nbins = 200;
   };
};
     
//the parameters of the model are the number of signal and
// background events after the selection
parameters = ("s", "b");

gaussoverflat = {
    //specification of the "mass" observable
    mass = {
        //gaussian signal:
        signal = { // "signal" is a name you can choose freely here
            coefficient-function = {type = "mult"; parameters = ("s");};
            histogram = {
                type = "fixed_gauss";
                // In this case, we need to specify the observable here again,
                // as this defines the range and binning of the histogram (and
                // the configuration of the histogram works exactly the same
                // outside of an observable specification).
                observable = "mass";
                // the sum of bin entries should be 1.0 (such that "s" is the
                // number of events, not some multiple of that).
                normalize_to = 1.0;
                mean = 1000.0;
                width = 250.0;
            };
        };
        
        //flat background:
        bkg = {
            coefficient-function = {type = "mult"; parameters = ("b"); };
            histogram = {
                type = "fixed_poly";
                observable = "mass";
                normalize_to = 1.0;
                //coefficients of the polynomial, starting with x^0
                coefficients = [1.0];
            };
        };
    };

    parameter-distribution = {
        type ="product_distribution";
        distributions =("@b-dist",
            {
             type = "flat_distribution";
             s = {
                range = (0.0, "inf");
		fix-sample-value = 200.0;
            };
	});
    };
};

b-dist = {
             type = "gauss";
             parameter = "b";
             mean = 1000.0;
             width = 200.0;
             range = (0.0, "inf");
            };

delta-s-zero = {
   type = "delta_distribution";
   s = 0.0;
};

//generate likelihood ratio test statistics by minimizing all
// but the specified parameters (which are fixed) and saving the ratio as result.
hypotest = {
    type = "deltanll_hypotest";
    minimizer = "@myminuit";
    background-only-distribution = {
         type = "product_distribution";
         distributions=("@b-dist", "@delta-s-zero");};
    signal-plus-background-distribution = "@gaussoverflat.parameter-distribution";
};

myminuit = {
   type = "root_minuit";
};

main = {

   data_source = {
       type = "model_source";
       model = "@gaussoverflat";
   };
   
   //model to use for pseudo data generation and to pass to the producers:
   model = "@gaussoverflat";

   //name of producers to run:
   producers = ("@hypotest");

   //number of PE to run
   n-events = 500;
   
   output_database = {
        type = "sqlite_database";
        filename = "gaussoverflat.db";
    };
};

plugins = {
  files = ("lib/core-plugins.so", "lib/root.so");
};

