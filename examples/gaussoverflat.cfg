//define one obervable named "mass" with range [500, 1500] and 200 bins.
observables = {
   mass = {
       range = (500.0, 1500.0);
       nbins = 200;
   };
};
     
//the parameters of the model are the number of signal and
// background events after the selection
parameters = {
    s={
        default = 200.0;
        range = (0.0, "inf");
    };
    b={
        default = 1600.0;
        range = (0.0, "inf");
    };
};

gaussoverflat = {
    //specification of the "mass" observable
    mass = {
        //gaussian signal:
        signal = { // "signal" is a name you can choose freely here
            coefficients = ("s");
            histogram = {
                type = "fixed_gauss";
                // In this case, we need to specify the observable here again,
                // as this defines the range and binning of the histogram (and
                // the configuration of the histogram works exactly the same
                // outside of an observable specification).
                observable = "mass";
                // the sum of bin entries should be 1.0 (such that "s" is the
                // number of events, not some multiple of that).
                normalize_to = 1.0;
                mean = 1000.0;
                width = 250.0;
            };
        };
        
        //flat background:
        bkg = {
            coefficients = ("b");
            histogram = {
                type = "fixed_poly";
                observable = "mass";
                normalize_to = 1.0;
                //coefficients of the polynomial, starting with x^0
                coefficients = [1.0];
            };
        };
    };

    constraints = {
        c = { // the name "c" can be chosen at will
            //multivariate gaussian:
            type = "gauss";
            // list of parameters the gaussian depends on:
            parameter = "b";
            // means (same order as parameters)
            mean = 1000.0;
            // covariance matrix as list of arrays, i.e. 3x3 matrix = ([],[],[]):
            width = 200.0;
        };
    };
};

//generate likelihood ratio test statistics by minimizing all
// but the specified parameters (which are fixed) and saving the ratio as result.
hypotest = {
    type = "deltanll_hypotest";
    minimizer = "myminuit";
    background-only = {s = 0.0;};
    signal-plus-background = {};
};

myminuit = {
   type = "root_minuit";
};

main = {
   type = "plain_run";
   
   //model to use for pseudo data generation and to pass to the producers:
   model = "gaussoverflat";

   //name of producers to run:
   producers = ("hypotest");

   //number of PE to run
   n-events = 500;
   
   result-file = "gaussoverflat-result.db";
};

plugins = {
  files = ("lib/core-plugins.so", "lib/root.so");
};

